%% Time Until Collision

%Description: Given a the relative position and velocity of two agents,
%along with the sum of their radii, returns the times until they collide.

%Parameters:
%   relP: A 1x2 double for the relative position
%       Agent1Pose - Agent2Pose
%   relV: A 1x2 double for the relative velocity
%       Agent1Vel - Agent2Vel
%   radSum: A double for the sum of their radii

%Returns:
%   times: An Nx1 double where the time until centralAgent and the ith
%       neighbor collide is times(i). If they won't collide, then
%       times(i) = NaN. If they are colliding currently, then
%       times(i) = .0001.
function times = timeTilCollisionFunc(relP, relV, radSum)
    %Allocates all times until collisions
    times = zeros(size(neighborsPositions,1),1);
    
    %Initializes variables for quadratic formula application
    relP = centralAgentPosition - neighborsPositions;
    relV = centralAgentVelocity - neighborsVelocities;
    radSum = 2 * agentRadius;
    
    %For each neighbor
    for i = 1:size(neighborsPositions,1)
    
        %If their relative velocity is zero, the quadratic formula below
        %doesn't hold, so this case must be considered separately.
        if norm(relV(i,:)) == 0
            
            %If they are currently colliding
            if relP(i,:) < radSum
                times(i) = .0001;
            else %If they aren't
                times(i) = NaN;
            end
            
        %If the time bounds on the collision period are complex or equal
        elseif dot(relV(i,:),relP(i,:))^2 - norm(relV(i,:))^2 * (norm(relP(i,:))^2 - radSum^2) <= 0
            %They won't ever collide
            times(i) = NaN;

        else
            %Calculates the times that bound their collision period.
            %They will collide at any time t in (time1,time2).
            time1 = ( -dot(relV(i,:),relP(i,:)) - sqrt(dot(relV(i,:),relP(i,:))^2 - norm(relV(i,:))^2 * (norm(relP(i,:))^2 - radSum^2)) ) / (norm(relV(i,:))^2);
            time2 = ( -dot(relV(i,:),relP(i,:)) + sqrt(dot(relV(i,:),relP(i,:))^2 - norm(relV(i,:))^2 * (norm(relP(i,:))^2 - radSum^2)) ) / (norm(relV(i,:))^2);

            %If both times are non-positive
            if time2 <= 0
                %They are moving away from a collision
                times(i) = NaN;

            %If time1 < 0 < time2
            elseif time1 < .0001
                %They are in the middle of a collision
                times(i) = .0001;

            %If 0 <= time1 < time2
            else
                %They will collide in the future
                times(i) = time1;
            end
        end
    end
end

