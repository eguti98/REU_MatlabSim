% Individual vs. Herd %
numberOfAgents = 10;
initPositions = zeros(numberOfAgents,2);

initPositions(1,:) = [mapSize-agentRadius,0];
initPositions(2:4,1) = agentRadius-mapSize;
initPositions(5:7,1) = 2*safetyMargin*agentRadius + agentRadius - mapSize;
initPositions(8:10,1) = 4*safetyMargin*agentRadius + agentRadius - mapSize;
initPositions(2:3:8,2) = 0;
initPositions(3:3:9,2) = 2*safetyMargin*agentRadius;
initPositions(4:3:10,2) = -2*safetyMargin*agentRadius;

goalLocations = zeros(numberOfAgents,2);
goalLocations(1,:) = [agentRadius-mapSize,0];
goalLocations(2:10,:) = initPositions(2:10,:) + [mapSize - agentRadius - (4*safetyMargin*agentRadius + agentRadius - mapSize),0];
% ============================================== %

% Slalom Course (recommended max of 11 agents)%
initPositions = zeros(numberOfAgents,2);

initPositions(1,:) = [0,-9];

initPositions(2:numberOfAgents,2) = 0:(9/(numberOfAgents - 2)):9;

initPositions(2:2:numberOfAgents,1) = 1;
initPositions(3:2:numberOfAgents,1) = -1;

goalLocations = initPositions - [0,9];
goalLocations(1,:) = [0,9];
% ============================================== %

% Stalemate Resolution %
initPositions = [safetyMargin*agentRadius,0; -safetyMargin*agentRadius,0];
goalLocations = [agentRadius-mapSize,0; mapSize-agentRadius,0];
numberOfAgents = 2;
% ============================================== %

% Random Antipodal Swap %
initPositions = zeros(numberOfAgents, 2);
goalLocations = zeros(numberOfAgents, 2);
for i = 1:numberOfAgents
    theta = rand()*2*pi;
    initPositions(i,:) = [cos(theta),sin(theta)]*mapSize*(.7+(rand()-0.5)*.2);
    goalLocations(i,:) = [cos(theta+pi),sin(theta+pi)]*mapSize*(.7+(rand()-0.5)*.2);
end
% ============================================== %

% Uniform Antipodal Swap %
initPositions = zeros(numberOfAgents, 2);
goalLocations = zeros(numberOfAgents, 2);
for i = 1:numberOfAgents
    theta = 2*pi/numberOfAgents * (i-1);
    initPositions(i,:) = [cos(theta),sin(theta)]*mapSize*(.9+(rand()-0.5)*.1);
    goalLocations(i,:) = [cos(theta+3.9*pi/4),sin(theta+3.9*pi/4)]*mapSize*(.9+(rand()-0.5)*.1);
end
% ============================================== %