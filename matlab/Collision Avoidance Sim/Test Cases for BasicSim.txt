% Individual vs. Herd %
initPositions = [9,0;  ...
                 -5,2;  ...
                 -5,-2; ...
                 -7,3;  ...
                 -7,0;  ...
                 -7,-3; ...
                 -9,2;  ...
                 -9,-2];
goalLocations = [-9,0;  ...
                  9,2;  ...
                  9,-2; ...
                  7,3;  ...
                  7,0;  ...
                  7,-3; ...
                  5,2;  ...
                  5,-2];
numberOfAgents = 8;
% ============================================== %

% Slalom Course (recommended max of 11 agents)%
initPositions = zeros(numberOfAgents,2);

initPositions(1,:) = [0,-9];

d = 9 / (numberOfAgents - 2);

initPositions(2:numberOfAgents,2) = 0:d:9;

initPositions(2:2:numberOfAgents,1) = 1;
initPositions(3:2:numberOfAgents,1) = -1;

goalLocations = initPositions - [0,9];
goalLocations(1,:) = [0,9];
% ============================================== %

% Stalemate Resolution %
initPositions = [1.2,0;-1.2,0];
goalLocations = [-9,0;9,0];
numberOfAgents = 2;
% ============================================== %

% Random Antipodal Swap %
initPositions = zeros(numberOfAgents, 2);
goalLocations = zeros(numberOfAgents, 2);
for i = 1:numberOfAgents
    theta = rand()*2*pi;
    initPositions(i,:) = [cos(theta),sin(theta)]*mapSize*(.7+(rand()-0.5)*.2);
    goalLocations(i,:) = [cos(theta+pi),sin(theta+pi)]*mapSize*(.7+(rand()-0.5)*.2);
end
% ============================================== %

% Uniform Antipodal Swap %
initPositions = zeros(numberOfAgents, 2);
goalLocations = zeros(numberOfAgents, 2);
for i = 1:numberOfAgents
    theta = 2*pi/numberOfAgents * (i-1);
    initPositions(i,:) = [cos(theta),sin(theta)]*mapSize*(.9+(rand()-0.5)*.1);
    goalLocations(i,:) = [cos(theta+3.9*pi/4),sin(theta+3.9*pi/4)]*mapSize*(.9+(rand()-0.5)*.1);
end
% ============================================== %